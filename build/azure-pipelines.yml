# Color Parser for .Net 
# Build, test, create packages, publish packages and create release on GitHub.

trigger:
  branches:
    include:
    - main
    - release
    - develop
  tags:
    exclude:
    - v*
  paths:
    include:
    - 'src/*'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  testProject: '**/*Tests/*.csproj'
  gitVersionPath: 'build/GitVersion.yml'
  buildConfiguration: 'Release'
  publishOnGithubRelease: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  publishOnNugetOrg: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  addTagToRepository: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

steps:
- checkout: self
  persistCredentials: true
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet 5.8.1'
  inputs:    
    versionSpec: 5.8.1
- task: NuGetCommand@2
  displayName: 'Restore NuGets'
  inputs:
    restoreSolution: '$(solution)'
    includeNuGetOrg: true
    command: restore
    feedsToUse: 'select'
    feedRestore: 'DotNetColorParser/DotNetColorParserBuild'
- task: gitversion/setup@0
  displayName: 'Setup GitVersions'
  inputs:
    versionSpec: 5.6.6
- task: gitversion/execute@0
  displayName: 'Get build version'
  inputs:
    useConfigFile: true
    configFilePath: '$(gitVersionPath)'
- task: DotNetCoreCLI@2
  displayName: 'Build project ($(buildConfiguration) configuration)'
  inputs:
    command: build
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.SemVer'
- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: test
    projects: '$(testProject)'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
- task: DotNetCoreCLI@2
  displayName: 'Create NuGet package'
  inputs:
    command: pack
    projects: '$(solution)'
    includesymbols: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersion'
    buildProperties: 'SymbolPackageFormat=snupkg'
- script: |
     git tag v$(GitVersion.NuGetVersion)
     git push origin v$(GitVersion.NuGetVersion) 
  condition: and(succeeded(), eq(variables['addTagToRepository'], true))
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Add tag to commit'
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
- task: NuGetAuthenticate@0
  displayName: 'Authenticate DevOps Artifacts Nuget'
- task: NuGetCommand@2
  displayName: 'Publish NuGet package on DevOps Artifacts'
  inputs:
    command: push
    publishVstsFeed: 'DotNetColorParser/DotNetColorParserBuild'
    allowPackageConflicts: true
- task: NuGetCommand@2
  displayName: 'Publish NuGet package on NuGet.org'
  condition: and(succeeded(), eq(variables['publishOnNugetOrg'], true))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'nuget.org_robolynx'
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersion'
- task: GitHubRelease@1
  displayName: 'Publish on Github Release'
  condition: and(succeeded(), eq(variables['publishOnGithubRelease'], true))
  inputs:
    gitHubConnection: 'github.com_sebafelis'
    repositoryName: '$(Build.Repository.Name)'
    action: create
    target: '$(Build.SourceVersion)'
    tagSource: gitTag
    tagPattern: 'v.*'
    isDraft: false
    isPreRelease: false
    assetUploadMode: delete
    assets: '$(Build.ArtifactStagingDirectory)/*'
    addChangeLog: false   

